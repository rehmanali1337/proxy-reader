from _typeshed import Incomplete as Incomplete
from typing import Optional

class TypesDefs:
    ProxiesList: Incomplete

class ProxiesReader:
    debug: Incomplete
    extra_debug: Incomplete
    shuffle: Incomplete
    proxies: Incomplete
    has_auth: bool
    bad_proxies: Incomplete
    working_proxies: Incomplete
    proxies_checked: bool
    def __init__(self, file_path: str = ..., shuffle: bool = ..., debug: bool = ..., extra_debug: bool = ...) -> None: ...
    @property
    def total(self) -> None: ...
    @property
    def total_working(self) -> None: ...
    @property
    def total_bad(self) -> None: ...
    def read_raw(self) -> None: ...
    def read_with_auth(self) -> None: ...
    def read_authless(self) -> None: ...
    async def check_all_proxies(self, max_resp_time: int = ...): ...
    async def check_all_proxies_socks5(self, max_resp_time: int = ...): ...
    def get_working_proxies_list_http(self) -> None: ...
    def write_working_proxies(self, filename: str): ...
    def get_random_http(self) -> Optional[str]: ...
    def get_random_socks5(self) -> Optional[str]: ...
    def get_random_socks5_telegram(self) -> Optional[str]: ...
    def next_http_from_list(self) -> Optional[str]: ...
    def next_http_from_cycle(self) -> str: ...
    def next_socks5_from_list(self) -> str: ...
    def next_socks5_from_cycle(self) -> str: ...
    def next_http_telegram_from_list(self) -> str: ...
    def next_http_telegram_from_cycle(self) -> str: ...
    def next_socks5_telegram_from_cycle(self) -> str: ...
    def next_socks5_telegram_from_list(self) -> str: ...
    def next_https_from_list(self) -> str: ...
    def next_https_from_cycle(self) -> str: ...
